########################################################
###   CenTFinder                                     ###
###   Class definitions                              ###
###   version 21032018                               ###
###   Author: Jonathan De Smedt                      ###
########################################################


# Create required generics

setGeneric(name = "data",
           def = function(CenTFinderObject){
             standardGeneric("data")
           })

setGeneric(name = "data<-",
           def = function(x, value){
             standardGeneric("data<-")
           })

setGeneric(name = "setSampleAnnotations",
           def = function(CenTFinderObject,files,celltypes){
             standardGeneric("setSampleAnnotations")
           })

setGeneric(name = "sampleAnnotations",
           def = function(CenTFinderObject){
             standardGeneric("sampleAnnotations")
           })

setGeneric(name = "platforms",
           def = function(CenTFinderObject){
             standardGeneric("platforms")
           })

setGeneric(name = "filteredData",
           def = function(CenTFinderObject){
             standardGeneric("filteredData")
           })

setGeneric(name = "filteredData<-",
           def = function(x, value){
             standardGeneric("filteredData<-")
           })

setGeneric(name = "DEset",
           def = function(CenTFinderObject){
             standardGeneric("DEset")
           })

setGeneric(name = "DEset<-",
           def = function(x, value){
             standardGeneric("DEset<-")
           })

setGeneric(name = "scaleIndependencePlot",
           def = function(CenTFinderObject){
             standardGeneric("scaleIndependencePlot")
           })

setGeneric(name = "meanConnectivityPlot",
           def = function(CenTFinderObject){
             standardGeneric("meanConnectivityPlot")
           })

setGeneric(name = "modulePCA",
           def = function(CenTFinderObject, module){
             standardGeneric("modulePCA")
           })

setGeneric(name = "power",
           def = function(CenTFinderObject){
             standardGeneric("power")
           })

setGeneric(name = "tree",
           def = function(CenTFinderObject){
             standardGeneric("tree")
           })

setGeneric(name = "geneAnnotations",
           def = function(CenTFinderObject){
             standardGeneric("geneAnnotations")
           })


# Create required methods

setMethod(f = "data",
          signature = "CenTFinder",
          definition = function(CenTFinderObject){
            return(CenTFinderObject@data)
          })

setMethod(f = "data<-",
          signature = "CenTFinder",
          definition = function(x, value){
            x@data<-as.matrix(value)
            return(x)
          })

setMethod(f = "setSampleAnnotations",
          signature = "CenTFinder",
          definition = function(CenTFinderObject, files, celltypes){
            annot<-data.frame(File_name = files,
                              Cell_type = celltypes,
                              stringsAsFactors = F)
            CenTFinderObject@sample_annotation<-merge(CenTFinderObject@sample_annotation,annot,by="File_name",all.x=T,all.y=F)
            CenTFinderObject@sample_annotation$Group<-CenTFinderObject@sample_annotation$Cell_type
            CenTFinderObject@sample_annotation<-CenTFinderObject@sample_annotation%>%
              group_by(Group)%>%
              mutate(Sample = paste0(Cell_type,1:length(Cell_type)))
            return(CenTFinderObject)
          })

setMethod(f = "sampleAnnotations",
          signature = "CenTFinder",
          definition = function(CenTFinderObject){
            return(CenTFinderObject@sample_annotation)
          })

setMethod(f = "platforms",
          signature = "CenTFinder",
          definition = function(CenTFinderObject){
            return(CenTFinderObject@platforms)
          })


setMethod(f = "filteredData",
          signature = "CenTFinder",
          definition = function(CenTFinderObject){
            return(CenTFinderObject@filtered_data)
          })

setMethod(f = "filteredData<-",
          signature = "CenTFinder",
          definition = function(x, value){
            x@filtered_data<-as.matrix(value)
            return(CenTFinderObject)
          })

setMethod(f = "DEset",
          signature = "CenTFinder",
          definition = function(CenTFinderObject){
            return(CenTFinderObject@DE)
          })

setMethod(f = "DEset<-",
          signature = "CenTFinder",
          definition = function(x, value){
            if(any(names(value)[1:3]!=c("Gene","logFC","Pvalue"))){
              stop("The first three column names of provided DEset should be Gene, logFC, and Pvalue.")
            }
            x@DE<-data.frame(value, stringsAsFactors = F)
            validObject(x)
            return(x)
          })


setMethod(f = "scaleIndependencePlot",
          signature = "CenTFinder",
          definition = function(CenTFinderObject){
            return(CenTFinderObject@plots$Scale_independence)
          })

setMethod(f = "meanConnectivityPlot",
          signature = "CenTFinder",
          definition = function(CenTFinderObject){
            return(CenTFinderObject@plots$Mean_connectivity)
          })


setMethod(f = "modulePCA",
          signature = "CenTFinder",
          definition = function(CenTFinderObject, module){
            return(CenTFinderObject@plots$PCA_plots_per_cluster[[module]])
          })

setMethod(f = "power",
          signature = "CenTFinder",
          definition = function(CenTFinderObject){
            return(CenTFinderObject@power)
          })


setMethod(f = "tree",
          signature = "CenTFinder",
          definition = function(CenTFinderObject){
            plot(CenTFinderObject@tree)
          })

setMethod(f = "geneAnnotations",
          signature = "CenTFinder",
          definition = function(CenTFinderObject){
            return(CenTFinderObject@gene_cluster_annotation)
          })




